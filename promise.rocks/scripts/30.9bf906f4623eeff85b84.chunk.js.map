{"version":3,"sources":["webpack:///./app/components/containers/dynamic/MultiGrid.js"],"names":["rows","Array","from","length","v","i","sn","name","born","age","weight","height","addr","email","phone","hobbies","labels","Object","keys","React","Component","constructor","props","super","forEach","m","this","bind","_cache","CellMeasurerCache","defaultWidth","minWidth","fixedHeight","cellRenderer","columnIndex","key","parent","rowIndex","style","content","className","cache","whiteSpace","render","width","disableHeight","deferredMeasurementCache","columnWidth","columnCount","fixedColumnCount","fixedRowCount","rowHeight","rowCount"],"mappings":"gyBAGA,MAAMA,EAAOC,MAAMC,KAAK,CAACC,OAAQ,KAAM,CAACC,EAAGC,KAClC,CACLC,GAAID,EAAI,EACRE,KAAM,SACNC,KAAM,aACNC,IAAK,GACLC,OAAQ,OACRC,OAAQ,IACRC,KAAM,aACNC,MAAO,sBACPC,MAAO,MACPC,QAAS,aAGPC,EAASC,OAAOC,KAAKlB,EAAK,IAGjB,wBAAcmB,IAAMC,UAEjCC,YAAYC,GACVC,MAAMD,GACN,CAAC,gBAAgBE,QAAQC,GAAKC,KAAKD,GAAKC,KAAKD,GAAGE,KAAKD,OAErDA,KAAKE,OAAS,IAAIC,IAAkB,CAClCC,aAAc,IACdC,SAAU,GACVC,aAAa,IAIjBC,cAAa,YAACC,EAAD,IAAcC,EAAd,OAAmBC,EAAnB,SAA2BC,EAA3B,MAAqCC,IAChD,MAAMC,EAAuB,IAAbF,EACd,0BAAMG,UAAU,cAAcxB,EAAOkB,IAAuBlC,EAAKqC,GAAUrB,EAAOkB,IACpF,OACE,kBAAC,IAAD,CACEO,MAAOf,KAAKE,OACZM,YAAaA,EACbC,IAAKA,EACLC,OAAQA,EACRC,SAAUA,GACV,yBACEC,MAAK,KACAA,EADA,CAEHI,WAAY,YAEbH,IAMTI,SACE,OACE,yBAAKH,UAAU,YAAYF,MAAO,CAACM,MAAO,QACxC,kBAAC,IAAD,CAAWC,eAAa,GACtB,EAAED,WAAW,kBAAC,IAAD,CACXE,yBAA0BpB,KAAKE,OAC/BK,aAAcP,KAAKO,aACnBc,YAAarB,KAAKE,OAAOmB,YACzBC,YAAahC,EAAOb,OACpB8C,iBAAkB,EAClBC,cAAe,EACfvC,OAAQ,IACRwC,UAAW,GACXC,SAAUpD,EAAKG,OACfyC,MAAOA","file":"scripts/30.9bf906f4623eeff85b84.chunk.js","sourcesContent":["import React from 'react';\nimport {MultiGrid, AutoSizer, CellMeasurer, CellMeasurerCache} from 'react-virtualized';\n\nconst rows = Array.from({length: 100}, (v, i) => {\n  return {\n    sn: i + 1,\n    name: 'youmoo',\n    born: '2018-01-27',\n    age: 25,\n    weight: '75kg',\n    height: 176,\n    addr: '浙江杭州余杭梦想小镇',\n    email: 'youmoo@vellichor.me',\n    phone: '110',\n    hobbies: 'reading'\n  }\n});\nconst labels = Object.keys(rows[0]);\n\n\nexport default class extends React.Component {\n\n  constructor(props) {\n    super(props);\n    ['cellRenderer'].forEach(m => this[m] = this[m].bind(this));\n\n    this._cache = new CellMeasurerCache({\n      defaultWidth: 100,\n      minWidth: 75,\n      fixedHeight: true\n    });\n  }\n\n  cellRenderer({columnIndex, key, parent, rowIndex, style}) {\n    const content = rowIndex === 0 ?\n      <span className='title is-5'>{labels[columnIndex]}</span> : rows[rowIndex][labels[columnIndex]];\n    return (\n      <CellMeasurer\n        cache={this._cache}\n        columnIndex={columnIndex}\n        key={key}\n        parent={parent}\n        rowIndex={rowIndex}>\n        <div\n          style={{\n            ...style,\n            whiteSpace: 'nowrap',\n          }}>\n          {content}\n        </div>\n      </CellMeasurer>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"container\" style={{width: '50%'}}>\n        <AutoSizer disableHeight>{\n          ({width}) => <MultiGrid\n            deferredMeasurementCache={this._cache}\n            cellRenderer={this.cellRenderer}\n            columnWidth={this._cache.columnWidth}\n            columnCount={labels.length}\n            fixedColumnCount={2}\n            fixedRowCount={1}\n            height={500}\n            rowHeight={40}\n            rowCount={rows.length}\n            width={width}\n          />\n        }\n        </AutoSizer>\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}