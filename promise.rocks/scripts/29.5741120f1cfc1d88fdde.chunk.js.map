{"version":3,"sources":["webpack:///./app/components/containers/dynamic/PasteDelegate.js","webpack:///./app/components/containers/dynamic/基金重仓股分析.js","webpack:///./app/api/misc.js","webpack:///../node_modules/regenerator-runtime/runtime.js"],"names":["__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0___default","a","Component","constructor","props","super","this","state","text","handlePaste","bind","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","e","items","clipboardData","getAsString","dealWith","setState","render","createElement","className","children","_PasteDelegate__WEBPACK_IMPORTED_MODULE_2__","loading","respond","then","data","[object Object]","res","Object","_api_misc__WEBPACK_IMPORTED_MODULE_3__","decoder","TextDecoder","parser","DOMParser","buf","arrayBuffer","dataView","DataView","html","decode","num","split","interested","filter","v","trim","stocks","match","stock","some","includes","map","replace","seq","symbol","name","fund_count","promised_funds","Promise","all","async","date","detail_res","detail_buf","detail_html","detail_table","exec","parseFromString","firstChild","cells","textContent","fetch_funds","i","entries","funds","stat","Map","fund_map","stock_map","set","fund","prev","get","Set","add","sort","b","size","fund_symbol","stock_symbols","test","slice","react__WEBPACK_IMPORTED_MODULE_1___default","style","whiteSpace","dangerouslySetInnerHTML","__html","key","colSpan","length","__webpack_require__","d","setToken","goFetch","path","conf","fetch","cors","url","fetchNotices","JSON","parse","getToken","sessionStorage","token","global","undefined","Op","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","module","runtime","regeneratorRuntime","exports","wrap","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","call","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","arg","__await","defineIteratorMethods","AsyncIterator","innerFn","outerFn","self","tryLocsList","iter","next","result","done","value","toString","keys","object","push","reverse","pop","Context","reset","skipTempReset","sent","_sent","delegate","method","tryEntries","forEach","resetTryEntry","charAt","isNaN","stop","rootRecord","completion","type","rval","dispatchException","exception","context","handle","loc","caught","record","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","abrupt","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","fn","obj","err","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","unwrapped","return","TypeError","info","pushTryEntry","locs","iteratorMethod","Function"],"mappings":"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","file":"scripts/29.5741120f1cfc1d88fdde.chunk.js","sourcesContent":["import React from \"react\"\n\nclass PasteDelegate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {text: ''};\n    this.handlePaste = this.handlePaste.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"paste\", this.handlePaste)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"paste\", this.handlePaste);\n  }\n\n  handlePaste(e) {\n    const items = e.clipboardData.items;\n    if (items) {\n      items[0].getAsString(text => {\n        this.dealWith(text)\n      });\n    }\n  }\n\n  dealWith(text) {\n    this.setState({text});\n  }\n\n  render() {\n    return <main className=\"container\">\n      {this.props.children(this.state)}\n    </main>\n  }\n}\n\n\nexport default PasteDelegate;\n","import 'regenerator-runtime/runtime';\nimport React from \"react\"\nimport PasteDelegate from './PasteDelegate';\n\nimport {cors} from \"../../../api/misc\";\n\nclass Comp extends PasteDelegate {\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n  }\n\n  handlePaste(e) {\n    if (this.state.loading) {\n      return;\n    }\n    const items = e.clipboardData.items;\n    if (items) {\n      items[0].getAsString(text => {\n        this.setState({loading: true});\n        this.respond(text)\n          .then(data => {\n            this.setState({text, data, loading: false});\n          })\n      });\n    }\n  }\n\n  async respond(text) {\n    if (!text) {\n      return []\n    }\n    const res = await cors('http://fund.jrj.com.cn/action/fhs/list.jspa');\n\n    const decoder = new TextDecoder('gbk');\n    const parser = new DOMParser();\n\n    const buf = await res.arrayBuffer();\n    const dataView = new DataView(buf);\n\n    const html = decoder.decode(dataView);\n    const num = +text.split('|')[1] || 10;\n\n    const interested = text.split('|')[0].split(/,|，|\\s/).filter(v => v.trim());\n    const stocks = html.match(/JSON_DATA.push.+/g).filter(stock => interested.some(v => stock.includes(v))).map(stock => {\n        return stock.replace(/.+\\[(.+)\\].+/, '$1').replace(/\"/g, '');\n      }\n    ).map(stock => {\n        const [seq, symbol, name, fund_count] = stock.split(',');\n        return {\n          symbol,\n          name,\n          fund_count\n        };\n      }\n    );\n    // 使用Promise.all达到并发请求的目的\n    const promised_funds = await Promise.all(stocks.map(stock => fetch_funds(stock.symbol)));\n    for (let [i, stock] of stocks.entries()) {\n      stock.funds = promised_funds[i];\n    }\n\n    // {股票代码:[基金代码]}\n    const stat = new Map;\n    // {基金代码:{name:基金名称}}\n    const fund_map = new Map;\n    // {股票代码:{name:股票名称}}\n    const stock_map = new Map;\n\n    for (let stock of stocks) {\n      stock_map.set(stock.symbol, stock);\n      for (let fund of stock.funds) {\n        fund_map.set(fund.symbol, fund);\n        const prev = stat.get(fund.symbol) || new Set;\n        prev.add(stock.symbol);\n        stat.set(fund.symbol, prev);\n      }\n    }\n\n    const data = [...stat].sort((a, b) => {\n        return b[1].size - a[1].size;\n      }\n    ).map(([fund_symbol, stock_symbols]) => {\n        return [`${fund_map.get(fund_symbol).name}(${fund_symbol})`, ...[...stock_symbols].map(v => `${stock_map.get(v).name}(${v})`)]\n      }\n    ).filter(v => !/指数|沪深300/.test(v[0])).slice(0, num);\n\n    return data;\n\n    /**\n     获取给定报告期内给定股票的持有基金列表\n     */\n    async function fetch_funds(symbol, date = '20170930') {\n      const detail_res = await cors(`http://fund.jrj.com.cn/fhs/detail/${date}/${symbol}.shtml`);\n      const detail_buf = await detail_res.arrayBuffer();\n      const detail_html = decoder.decode(new DataView(detail_buf));\n      const [detail_table] = /<table>\\s*.+基金代码[\\s\\S]+?<\\/table>/g.exec(detail_html);\n\n      const doc = parser.parseFromString(detail_table.replace(/<tr>[\\s\\S]+?<\\/tr>/, ''), \"application/xml\");\n\n      const funds = [...doc.firstChild.children].map(({children: cells}) => {\n          return {\n            symbol: cells[0].textContent,\n            name: cells[1].textContent\n          }\n        }\n      );\n      return funds;\n    }\n  }\n\n  render() {\n    const {loading} = this.state;\n    const text = this.state.text || `请将股票名称粘贴在本页面`;\n    if (loading) {\n      return <main className=\"container\">\n        <pre style={{whiteSpace: 'pre'}} dangerouslySetInnerHTML={{__html: text}}/>\n        <hr/>\n        <p>加载中...</p>\n      </main>\n    }\n\n    const data = this.state.data || [];\n    return <main className=\"container\">\n      <pre style={{whiteSpace: 'pre'}} dangerouslySetInnerHTML={{__html: text}}/>\n      <hr/>\n      <p>已过滤含有<strong>指数</strong>及<strong>沪深300</strong>字眼的基金</p>\n      <section>\n        {data.map(fund => {\n          return <table className='table is-bordered' key={fund[0]}>\n            <thead>\n            <tr>\n              <th colSpan={fund.length - 1}>{fund[0]}</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              {fund.slice(1).map(v => <td key={v}>{v}</td>)}\n            </tr>\n            </tbody>\n          </table>\n        })}\n      </section>\n    </main>\n  }\n}\n\nexport default Comp;\n","const decoder = new TextDecoder('gbk');\n\nexport function goFetch(path, conf) {\n  return fetch('https://ask.solutions/go-api' + path, conf);\n}\n\n\n/**\n * 方便跨域请求\n */\nexport function cors(url) {\n  return fetch('https://ask.solutions/go-api/play/cors?' + url);\n}\n\n\n/**\n * 获取股票公告\n */\nexport async function fetchNotices(symbol, size = 5) {\n  const url = `http://data.eastmoney.com/notices/getdata.ashx?StockCode=${symbol}&CodeType=1&PageIndex=1&PageSize=${size}&jsObj=a`;\n  const res = await cors(url);\n  const buf = await res.arrayBuffer();\n  const dataView = new DataView(buf);\n\n  const text = decoder.decode(dataView);\n  return JSON.parse(text.slice(7, -1));\n}\n\nexport function getToken() {\n  return sessionStorage.token;\n}\n\nexport function setToken(token) {\n  sessionStorage.token = token;\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n"],"sourceRoot":""}