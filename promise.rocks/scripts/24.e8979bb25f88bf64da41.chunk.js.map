{"version":3,"sources":["webpack:///./app/components/containers/dynamic/page.js"],"names":["Pagination","React","Component","constructor","props","super","this","state","page","size","step","forEach","v","bind","add","s","f","Array","from","length","i","last","first","click","e","setState","target","textContent","prev","next","finish","elements","map","cloneElement","onClick","key","className","children","start","concat","render","id"],"mappings":"2FAAA,kCAuHeA,UA/Gf,cAAyBC,IAAMC,UAC7BC,YAAYC,GACVC,MAAMD,GACNE,KAAKC,MAAQ,CACXC,KAAM,EACNC,KAAM,IACNC,KAAM,GAER,CAAC,OAAQ,OAAQ,SAASC,QAAQC,GAAKN,KAAKM,GAAKN,KAAKM,GAAGC,KAAKP,OAIhEQ,IAAIC,EAAGC,GACL,OAAOC,MAAMC,KAAK,CAACC,OAAQH,EAAID,GAAI,CAACH,EAAGQ,IAC9B,2BAAIL,EAAIK,IAKnBC,OACE,MAAO,CAAC,kCAAY,2BAAIf,KAAKC,MAAME,OAIrCa,QACE,MAAO,CAAC,gCAAU,mCASpBC,MAAMC,GACJlB,KAAKmB,SAAS,CACZjB,MAAOgB,EAAEE,OAAOC,cAKpBC,OACE,IAAI,KAACpB,GAAQF,KAAKC,QAClBC,EACW,IACTA,EAAO,GAETF,KAAKmB,SAAS,CAACjB,SAIjBqB,OACE,IAAI,KAACrB,EAAD,KAAOC,GAAQH,KAAKC,QACxBC,EACWC,IACTD,EAAOC,GAETH,KAAKmB,SAAS,CAACjB,SASjBsB,OAAOC,GACL,MAAM,KAACvB,GAAQF,KAAKC,MACpB,OAAOwB,EAASC,IAAI,CAACR,EAAGJ,IACfnB,IAAMgC,aAAaT,EAAG,CAC3BU,QAAS5B,KAAKiB,MACdY,IAAKf,EACLgB,UAAWZ,EAAEpB,MAAMiC,WAAa7B,EAAO,UAAY,MAMzD8B,QACE,MAAM,KAAC9B,EAAD,KAAOC,EAAP,KAAaC,GAAQJ,KAAKC,MAChC,IAAIwB,EAAW,GAmBf,OAhBEA,EAFEtB,EAAc,EAAPC,EAAW,EAETJ,KAAKQ,IAAI,EAAGL,EAAO,GAEvBD,EAAc,EAAPE,EAAW,EAEdJ,KAAKQ,IAAI,EAAU,EAAPJ,EAAW,GAAG6B,OAAOjC,KAAKe,QAE1Cb,EAAOC,EAAc,EAAPC,EAEVJ,KAAKgB,QAAQiB,OAAOjC,KAAKQ,IAAIL,EAAc,EAAPC,EAAW,EAAGD,EAAO,IAIzDH,KAAKgB,QACbiB,OAAOjC,KAAKQ,IAAIN,EAAOE,EAAMF,EAAOE,EAAO,IAC3C6B,OAAOjC,KAAKe,QAEVf,KAAKwB,OAAOC,GAGrBS,SAEE,OAAO,yBAAKC,GAAG,cACb,uBAAGP,QAAS5B,KAAKsB,MAAjB,KAAkC,8BAAOtB,KAAKgC,SAAe,uBAAGJ,QAAS5B,KAAKuB,MAAjB,S","file":"scripts/24.e8979bb25f88bf64da41.chunk.js","sourcesContent":["import React from \"react\";\n\nimport '../../../../css/page.scss'\n\n/**\n * 分页组件\n * source: https://codepen.io/karpovsystems/pen/fFHxK\n */\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 1, // current page\n      size: 300,// pages size\n      step: 3,// pages before and after current\n    };\n    ['prev', 'next', 'click'].forEach(v => this[v] = this[v].bind(this));\n  }\n\n  // add pages by number (from [s] to [f])\n  add(s, f) {\n    return Array.from({length: f - s}, (v, i) => {\n      return <a>{s + i}</a>\n    })\n  }\n\n  // add last page with separator\n  last() {\n    return [<i>...</i>, <a>{this.state.size}</a>]\n  }\n\n  // add first page with separator\n  first() {\n    return [<a>1</a>, <i>...</i>]\n  }\n\n\n  // --------------------\n  // Handlers\n  // --------------------\n\n  // change page\n  click(e) {\n    this.setState({\n      page: +e.target.textContent\n    })\n  }\n\n  // previous page\n  prev() {\n    let {page} = this.state;\n    page--;\n    if (page < 1) {\n      page = 1;\n    }\n    this.setState({page});\n  }\n\n  // next page\n  next() {\n    let {page, size} = this.state;\n    page++;\n    if (page > size) {\n      page = size;\n    }\n    this.setState({page});\n  }\n\n\n  // --------------------\n  // Script\n  // --------------------\n\n  // binding pages\n  finish(elements) {\n    const {page} = this.state;\n    return elements.map((e, i) => {\n      return React.cloneElement(e, {\n        onClick: this.click,\n        key: i,\n        className: e.props.children === page ? 'current' : ''\n      });\n    })\n  }\n\n  // find pagination type\n  start() {// 重新组装页面上要显示的元素\n    const {page, size, step} = this.state;\n    let elements = [];\n    if (size < step * 2 + 6) {\n      // 总页数小于12，把所有页码都显示出来\n      elements = this.add(1, size + 1);\n    }\n    else if (page < step * 2 + 1) {\n      // 当前页小于步长7,显示前9个页码+省略码+最后一个页码\n      elements = this.add(1, step * 2 + 4).concat(this.last());\n    }\n    else if (page > size - step * 2) {\n      // 当前页超过后6页的起点，显示第一个页码+省略码+后9个页码\n      elements = this.first().concat(this.add(size - step * 2 - 2, size + 1));\n    }\n    else {\n      // 否则，显示第一个页码+省略码+当前页的前3个页码+当前页码+当前页的后3个页码+省略码+最后个页码\n      elements = this.first()\n        .concat(this.add(page - step, page + step + 1))\n        .concat(this.last());\n    }\n    return this.finish(elements);\n  }\n\n  render() {\n\n    return <div id='pagination'>\n      <a onClick={this.prev}>&#9668;</a><span>{this.start()}</span><a onClick={this.next}>&#9658;</a>\n    </div>\n\n  }\n}\n\nexport default Pagination;\n\n\n\n\n\n"],"sourceRoot":""}